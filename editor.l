(de w () (out-to-file> This))
(de e (Fn)
    (setq Fn (pack (replace (chop Fn) "~" (sys "HOME"))))
    (set (:: name) Fn)
    (load-from-file> This Fn))

(class +FromFile)

(dm load-from-file> (Name)
    (let Name (or Name (: name))
         (ifn (info Name)
              (out Name))
         (set (:: lines) (in Name (make (until (eof) (link (line T))))))))

(dm out-to-file> (Name)
    (let Name (or Name (: name))
         (out Name (prinl (text> This)))))

(class +Editor)

(dm handle-key> (Ch)
    (let (Frames (car *State) Focus (cadr *State) Mode (caddr *State) Clipboard (cadddr *State))
      (setq Exit NIL)
      (cond
       ((= Mode 'normal) (cond
                          ((= Ch (char "q")) (setq Exit T))
                          ((= Ch (char "i"))
                           (setq Mode 'insert))
                          ((= Ch (char "A"))
                           (move-cursor> This
                                         (+ 1 (length (get-line> This (cursor-y> This))))
                                         (cursor-y> This))
                           (setq Mode 'insert))
                          ((= Ch (char "$"))
                           (move-cursor> This
                                         (+ 1 (length (get-line> This (cursor-y> This))))
                                         (cursor-y> This)))
                          ((= Ch (char "0"))
                           (move-cursor> This 1 (cursor-y> This)))
                          ((= Ch (char "o"))
                           (set (:: lines) (insert (+ 1 (: cursory)) (: lines) ""))
                           (move-cursor> This 1 (+ 1 (: cursory)))
                           (setq Mode 'insert))
                          ((= Ch (char "r"))
                           (setq Mode 'replace))
                          ((= Ch (char "w")) (out-to-file> This))
                          ((= Ch (char "b")) (setq Focus (+ 1 (% Focus (length Frames)))))
                          ((= Ch (char "x"))
                           (adjust-cursor> This 1 0)
                           (delete-char> This))
                          ((= Ch (char "r"))
                           (adjust-cursor> This 1 0)
                           (delete-char> This)
                           (setq Mode 'insert))
                          ((= Ch (char "v"))
                           (setq Mode 'visual)
                           (start-selection> This))
                          ((= Ch (char "p"))
                           (paste> This))
                          ((= Ch (char "/"))
                           (let (Width (/ (get-width Screen) 2)
                                 Height 3
                                 X (- (/ (get-width Screen) 2) (/ Width 2))
                                 Y (- (/ (get-height Screen) 3) Height)
                                 Popup (new '(+Popup +VisibleFrame) X Y Width Height
                                            (list "") 1 1 1 "Search"))
                             (register-handler> Popup (curry (This) (Line)
                                                             (prin "Result: ")
                                                             (println (look-for> This Line))))
                             (setq Frames (append Frames (list Popup)))
                             (setq Focus (length Frames))))
                          ((= Ch (char ":"))
                           (let (Width (/ (get-width Screen) 2)
                                       Height 3
                                       X (- (/ (get-width Screen) 2) (/ Width 2))
                                       Y (- (/ (get-height Screen) 3) Height)
                                       Popup (new '(+Popup +VisibleFrame) X Y Width Height
                                                  (list ":") 2 1 1 "Command Palette"))
                             (register-handler>
                              Popup
                              (curry (This) (Line)
                                     (let Cmd (str (pack (nth (chop Line) 2)))
                                          (prinl (name> This) ": " (eval Cmd)))))
                             (setq Frames (append Frames (list Popup)))
                             (setq Focus (length Frames))))
                          ((= Ch (char "h")) (adjust-cursor> This -1 0))
                          ((= Ch (char "k")) (adjust-cursor> This 0 -1))
                          ((= Ch (char "j")) (adjust-cursor> This 0 1))
                          ((= Ch (char "l")) (adjust-cursor> This 1 0))))
       ((= Mode 'insert) (cond
                           ((= Ch *KEY-LEFT) (adjust-cursor> This -1 0))
                           ((= Ch *KEY-UP) (adjust-cursor> This 0 -1))
                           ((= Ch *KEY-DOWN) (adjust-cursor> This 0 1))
                           ((= Ch *KEY-RIGHT) (adjust-cursor> This 1 0))
                           ((= Ch *KEY-BACKSPACE) (delete-char> This))
                           ((= Ch 27)
                            (adjust-cursor> This -1 0)
                            (setq Mode 'normal))
                           (T (add-char> This (char Ch)))))
       ((= Mode 'visual) (cond
                          ((= Ch (char "q")) (setq Exit T))
                          ((= Ch (char "h")) (adjust-cursor> This -1 0))
                          ((= Ch (char "k")) (adjust-cursor> This 0 -1))
                          ((= Ch (char "j")) (adjust-cursor> This 0 1))
                          ((= Ch (char "l")) (adjust-cursor> This 1 0))
                          ((= Ch (char "p"))
                           (paste> This))
                          ((= Ch (char "v"))
                           (setq Mode 'visual)
                           (start-selection> This))
                          ((or (= Ch 27))
                           (setq Mode 'normal)
                           (set (:: select-start) NIL))
                          ((= Ch (char "y"))
                           (copy> This)
                           (set (:: select-start) NIL))
                          ((= Ch (char "d"))
                           (let ((SP CP) (order-sel-pnts> This))
                             (delete-between> This SP CP)
                             (set (:: select-start) NIL)))))
       ((= Mode 'replace) (cond
                          ((= Ch *KEY-LEFT) (adjust-cursor> This -1 0))
                          ((= Ch *KEY-UP) (adjust-cursor> This 0 -1))
                          ((= Ch *KEY-DOWN) (adjust-cursor> This 0 1))
                          ((= Ch *KEY-RIGHT) (adjust-cursor> This 1 0))
                          ((= Ch *KEY-BACKSPACE) (delete-char> This))
                          ((= Ch 27) (setq Mode 'normal))
                          (T (replace-char> This (char Ch))))))
      (if Exit
          (let Res (list (delete This Frames) (max 1 (- (length Frames) 1)) Mode Clipboard)
               (delete> This)
               (curses "clear" NIL)
               Res)
        (list Frames Focus Mode Clipboard))))

(dm handle-mouse> (MX MY)
    (move-cursor> This MX (+ MY (: scroll)))
    *State)

(dm handle-resize> ()
    (curses "clear" NIL)
    (set (:: width) (get-width Screen))
    (set (:: height) (get-height Screen))
    (destroy-window (: window))
    (set (:: window) (create-new-window (: x) (: y) (: width) (: height))))

(dm pos-inside> (MX MY)
    (and (>= MX (: x)) (>= MY (: y))
         (<= MY (+ (: height) (: y))) (<= MX (+ (: x) (: width)))))

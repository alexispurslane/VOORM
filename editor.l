(class +FromFile)

(dm load-from-file> (Name)
    (let Name (or Name (: name))
         (ifn (info Name)
              (out Name))
         (set (:: lines) (in Name (make (until (eof) (link (line T))))))))

(dm out-to-file> (Name)
    (let Name (or Name (: name))
         (out Name (prinl (text> This)))))

(class +Editor)

(dm handle-key> (Ch Mode Focus)
    (setq Exit NIL)
    (cond
     ((= Mode 'normal) (cond
                        ((= Ch (char "q")) (setq Exit T))
                        ((= Ch (char "i"))
                         (setq Mode 'insert))
                        ((= Ch (char "A"))
                         (move-cursor> This
                                       (+ 1 (length (get-line> This (cursor-y> This))))
                                       (cursor-y> This))
                         (setq Mode 'insert))
                        ((= Ch (char "$"))
                         (move-cursor> This
                                       (+ 1 (length (get-line> This (cursor-y> This))))
                                       (cursor-y> This)))
                        ((= Ch (char "0"))
                         (move-cursor> This 1 (cursor-y> This)))
                        ((= Ch (char "o"))
                         (move-cursor> This 1 (+ 1 (cursor-y> This)))
                         (setq Mode 'insert))
                        ((= Ch (char "w")) (out-to-file> This))
                        ((= Ch (char "b")) (setq Focus (+ 1 Focus)))
                        ((= Ch (char "x"))
                         (adjust-cursor> This 1 0)
                         (delete-char> This))
                        ((= Ch (char "r"))
                         (adjust-cursor> This 1 0)
                         (delete-char> This)
                         (setq Mode 'insert))
                        ((= Ch (char "h")) (adjust-cursor> This -1 0))
                        ((= Ch (char "k")) (adjust-cursor> This 0 -1))
                        ((= Ch (char "j")) (adjust-cursor> This 0 1))
                        ((= Ch (char "l")) (adjust-cursor> This 1 0))))
     ((= Mode 'insert) (cond
                        ((= Ch *KEY-LEFT) (adjust-cursor> This -1 0))
                        ((= Ch *KEY-UP) (adjust-cursor> This 0 -1))
                        ((= Ch *KEY-DOWN) (adjust-cursor> This 0 1))
                        ((= Ch *KEY-RIGHT) (adjust-cursor> This 1 0))
                        ((= Ch *KEY-BACKSPACE) (delete-char> This))
                        ((= Ch 27)
                         (adjust-cursor> This -1 0)
                         (setq Mode 'normal))
                        (T (add-char> This (char Ch))))))
    (list Mode Exit NIL Focus))

(dm handle-mouse> (MX MY Mode)
    (move-cursor> This MX MY)
    (list Mode NIL))

(dm handle-resize> (Mode)
    (window-call> This "wclear" NIL)
    (set (:: height) (get-height Screen))
    (set (:: width) (get-width Screen))
    (list Mode NIL))

(dm pos-inside> (MX MY)
    (and (>= MX (: x)) (>= MY (: y))
         (<= MY (+ (: height) (: y))) (<= MX (+ (: x) (: width)))))

(dm update> (Mode Focus)
    (let Ch (window-call> This "wgetch" 'I)
         (cond
          ((= Ch *KEY-RESIZE)
           (handle-resize> This Mode))
          ((= Ch *KEY-MOUSE)
           (when (= (curses "getmouse" 'N
                            '(Event (20 I (I . 3) I))) 0)
             (let (MX (- (get Event 2 1) 5)
                      MY (get Event 2 2))
               (if (pos-inside> This MX MY)
                   (handle-mouse> This (- MX (: x)) (- MY (: y)) Mode)
                 (list Mode NIL (list MX MY))))))
          ((>= Ch 0)
           (handle-key> This Ch Mode Focus)))))
